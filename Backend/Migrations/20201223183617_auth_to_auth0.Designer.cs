// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(LBlogDbContext))]
    [Migration("20201223183617_auth_to_auth0")]
    partial class auth_to_auth0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Backend.Models.BlogModels.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlogContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StickTop")
                        .HasColumnType("bit");

                    b.Property<int?>("TypeBlogTypeID")
                        .HasColumnType("int");

                    b.HasKey("BlogID");

                    b.HasIndex("TypeBlogTypeID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Backend.Models.BlogModels.BlogTag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TagDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagID");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("Backend.Models.BlogModels.BlogType", b =>
                {
                    b.Property<int>("BlogTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BlogTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogTypeID");

                    b.ToTable("BlogTypes");
                });

            modelBuilder.Entity("BlogBlogTag", b =>
                {
                    b.Property<int>("BlogsBlogID")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagID")
                        .HasColumnType("int");

                    b.HasKey("BlogsBlogID", "TagsTagID");

                    b.HasIndex("TagsTagID");

                    b.ToTable("BlogBlogTag");
                });

            modelBuilder.Entity("Backend.Models.BlogModels.Blog", b =>
                {
                    b.HasOne("Backend.Models.BlogModels.BlogType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeBlogTypeID");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BlogBlogTag", b =>
                {
                    b.HasOne("Backend.Models.BlogModels.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsBlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.BlogModels.BlogTag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
